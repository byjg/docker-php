import os, sys
import yaml
from jinja2 import Environment, FileSystemLoader
from datetime import datetime, date

class Generator:
    def __init__(self, php_version, debug, push):
        build_config = "{dir}/config/php-{version}.yml".format(dir=os.getcwd(), version=php_version)

        if not os.path.exists(build_config):
            print('PHP Version {version} does not exists'.format(version=php_version))
            sys.exit(1)

        self.php_version = php_version
        self.debug = debug
        self.push = push
        self.build_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.build_config = yaml.load(stream=open(build_config), Loader=yaml.SafeLoader)
        self.local_base = False
        self.dockerfile_content = {"header": "", "from": "", "env": "", "cmd": "", "entrypoint": "", "workdir": "", "copy": "", "run": ""}
        self.config = None
        # print("--------------------------------------------")
        # print("PHP Version: " + php_version)
        # print("Debug: " + ("true" if debug else "false"))
        # print("--------------------------------------------")
        self.dockerfile_content["header"] += f"# Generated Dockerfile for PHP {php_version} at {self.build_date}\n"
        self.dockerfile_content["header"] += f"# This file was generated by the byjg/docker-php Generator\n\n"
        
    def parse_config(self, template, prepared=True):
        file_loader = FileSystemLoader('templates')
        env = Environment(loader=file_loader)
        template = env.get_template(template)
        output = template.render(self.build_config)
        if prepared:
            # Process each line individually
            processed_lines = []
            for line in output.split('\n'):
                # Remove trailing comments and strip whitespace
                processed_line = line.split('#')[0].strip()
                # Keep only non-empty lines
                if processed_line:
                    processed_lines.append(processed_line)

            # Apply the join operation directly
            output = " \\\n  && ".join(processed_lines)
        return output

    def _banner(self, config):
        self.config = config
        # print("")
        # print("")
        # print("===================================================================")
        # print("Building PHP {major}.{minor}-{config}".format(major=self.build_config["version"]["major"], minor=self.build_config["version"]["minor"], config=self.config))
        # print("===================================================================")
        # print("")

    def _build(self):
        config_template = "php-" + self.config + ".j2"
        image = self.image_name()

        self.dockerfile_content["header"] += f"# Image tag (for reference): {image}\n"
        self.dockerfile_content["env"] += f"ENV DOCKER_IMAGE=\"{image}\"\n"
        self.dockerfile_content["env"] += "ENV PHP_VERSION=\"{major}.{minor}\"\n".format(major=self.build_config["version"]["major"], minor=self.build_config["version"]["minor"])
        self.dockerfile_content["env"] += "ENV PHP_VARIANT=\"php{suffix}\"\n".format(suffix=self.build_config["version"]["suffix"])
        self.dockerfile_content["env"] += "ENV BUILD_DATE=\"{date}\"\n".format(date=self.build_date)
        self.dockerfile_content["run"] += "RUN " + self.parse_config(config_template) + "\n"

        return image

    def _from(self, image):
        # Write FROM directive to Dockerfile and return a dummy container id
        self.dockerfile_content["from"] += f"FROM {image}\n"

    def get_dockerfile_content(self):
        return self.dockerfile_content["header"] + \
               self.dockerfile_content["from"] + \
               self.dockerfile_content["env"] + \
               self.dockerfile_content["workdir"] + \
               self.dockerfile_content["copy"] + \
               self.dockerfile_content["run"] + \
               self.dockerfile_content["cmd"] + \
               self.dockerfile_content["entrypoint"]

    def image_name(self):
        return "byjg/php:{major}.{minor}-{config}".format(
            major=self.build_config["version"]["major"],
            minor=self.build_config["version"]["minor"],
            config=self.config.replace("_", "-")
        )

    def dockerfile_name(self):
        return "Dockerfile-php-{major}.{minor}-{config}".format(
            major=self.build_config["version"]["major"],
            minor=self.build_config["version"]["minor"],
            config=self.config.replace("_", "-")
        )

    def source_repo(self, php_source):
        return "byjg/php:{major}.{minor}-{php_source}".format(
            major=self.build_config["version"]["major"],
            minor=self.build_config["version"]["minor"],
            php_source=php_source)

    def build_base(self):
        self._banner("base")
        base_image = self.build_config["image"]["default"]
        self._from(base_image)
        self.dockerfile_content["entrypoint"] += "ENTRYPOINT [\"/entrypoint.sh\"]\n"
        self.dockerfile_content["workdir"] += "WORKDIR /srv\n"
        self.dockerfile_content["copy"] += "COPY assets/entrypoint.sh /\n"
        self.dockerfile_content["copy"] += "COPY assets/script/install-sqlsvr.sh /install-sqlsvr.sh\n"
        self.local_base = True
        return self._build()

    def build_cli(self):
        self._banner("cli")
        self._from(self.source_repo("base"))
        return self._build()

    def build_fpm(self):
        self._banner("fpm")
        self._from(self.source_repo("base"))
        self.dockerfile_content["cmd"] += "CMD [\"/start-fpm.sh\"]\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm/conf/www.conf /etc/php{suffix}/php-fpm.d/www.conf\n".format(suffix=self.build_config["version"]["suffix"])
        self.dockerfile_content["copy"] += "COPY assets/fpm/conf/base.conf /etc/php{suffix}/php-fpm.d/base.conf\n".format(suffix=self.build_config["version"]["suffix"])
        self.dockerfile_content["copy"] += "COPY assets/script/start-fpm.sh /start-fpm.sh\n"

        return self._build()

    def build_fpm_apache(self):
        self._banner("fpm-apache")
        self._from(self.source_repo("fpm"))
        self.dockerfile_content["cmd"] += "CMD [\"/usr/bin/supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"]\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-apache/conf/httpd.conf /etc/apache2/httpd.conf\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-apache/conf/vhost.conf /etc/apache2/conf.d/\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-apache/conf/supervisord.conf /etc/supervisord.conf\n"
        self.dockerfile_content["copy"] += "COPY assets/script/exit-event-listener.py /exit-event-listener.py\n"
        return self._build()

    def build_fpm_nginx(self):
        self._banner("fpm-nginx")
        self._from(self.source_repo("fpm"))
        self.dockerfile_content["cmd"] += "CMD [\"/usr/bin/supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"]\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-nginx/conf/nginx.conf /etc/nginx/nginx.conf\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-nginx/conf/nginx.vh.default.conf /etc/nginx/http.d/default.conf\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-nginx/conf/supervisord.conf /etc/supervisord.conf\n"
        self.dockerfile_content["copy"] += "COPY assets/script/exit-event-listener.py /exit-event-listener.py\n"
        self.dockerfile_content["copy"] += "COPY assets/script/start-nginx.sh /start-nginx.sh\n"
        self.dockerfile_content["run"] += "RUN " + self.parse_config("php-fpm-nginx.j2") + "\n"
        return self._build()

    def build_nginx(self):
        self._banner("nginx")
        base_image = self.build_config["image"]["default"]
        self._from(base_image)
        self.dockerfile_content["cmd"] += "CMD [\"/start-nginx.sh\"]\n"
        self.dockerfile_content["entrypoint"] += "ENTRYPOINT [\"/entrypoint.sh\"]\n"
        self.dockerfile_content["workdir"] += "WORKDIR /srv\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-nginx/conf/nginx.conf /etc/nginx/nginx.conf\n"
        self.dockerfile_content["copy"] += "COPY assets/fpm-nginx/conf/nginx.vh.default.conf /etc/nginx/http.d/default.conf\n"
        self.dockerfile_content["copy"] += "COPY assets/script/start-nginx.sh /start-nginx.sh\n"
        self.dockerfile_content["copy"] += "COPY assets/entrypoint.sh /\n"
        return self._build()
